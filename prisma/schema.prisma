// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  fName     String
  lName     String
  email     String    @unique
  password  String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  employer  Employer?
  jobSeeker JobSeekerProfile?
}

model Employer {
  id           Int          @id @default(autoincrement())
  userId       Int          @unique
  companyName  String?
  companySize  Int?
  industry     String?
  user         User         @relation(fields: [userId], references: [id])
  jobPostings  JobPostings[]
}

model JobPostings {
  id             Int          @id @default(autoincrement())
  employerId     Int
  jobTitle       String
  jobDescription String
  jobType        JobType
  minSalary      Int
  maxSalary      Int
  locations      String[]     // Array of country names
  industry       String?
  requiredSkills String[]     // Array of required skills
  qualifications String[]     // Array of qualifications
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  employer       Employer     @relation(fields: [employerId], references: [id])
  applications   Applications[]
}


model JobSeekerProfile {
  id             Int          @id @default(autoincrement())
  userId         Int          @unique
  location       String?      // Single location (country)
  skills         String[]    // Array of job seeker skills
  resumeUrl      String?
  coverLetterUrl String?
  linkedin       String?
  github         String?
  twitter        String?
  user           User         @relation(fields: [userId], references: [id])
  applications   Applications[]
}

model Applications {
  id               Int         @id @default(autoincrement())
  jobId            Int
  jobSeekerId      Int
  applicationStatus ApplicationStatus @default(pending)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  jobPosting       JobPostings @relation(fields: [jobId], references: [id])
  jobSeekerProfile JobSeekerProfile @relation(fields: [jobSeekerId], references: [id])
}

enum Role {
  employer
  job_seeker
}

enum JobType {
  full_time
  part_time
  contract
}

enum ApplicationStatus {
  pending
  under_review
  accepted
  rejected
}
